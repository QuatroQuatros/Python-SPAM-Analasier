# from transformers import AutoTokenizer, AutoModelForSequenceClassification
# import torch

# # C√≥digos ANSI para cores
# RED = '\033[91m'
# GREEN = '\033[92m'
# RESET = '\033[0m'

# # Carregar o modelo e o tokenizer salvos
# tokenizer = AutoTokenizer.from_pretrained("./tokenizer")
# model = AutoModelForSequenceClassification.from_pretrained("./models")

# # Mover o modelo para a GPU (se dispon√≠vel)
# device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
# model.to(device)
# model.eval()  # Colocar o modelo em modo de avalia√ß√£o

# test_emails = [
#     "Reuni√£o de equipe agendada para amanh√£ √†s 10h. Favor confirmar presen√ßa.",
#     "Parab√©ns! Voc√™ ganhou um pr√™mio de R$ 1.000,00. Clique aqui para resgatar.",
#     "Fatura de cart√£o de cr√©dito dispon√≠vel para visualiza√ß√£o. Acesse sua conta para mais detalhes.",
#     "Sua conta foi bloqueada. Para reativar, clique no link e atualize suas informa√ß√µes.",
#     "Convite para o semin√°rio sobre seguran√ßa cibern√©tica na pr√≥xima semana.",
#     "Voc√™ foi selecionado para uma oferta exclusiva! Responda agora para garantir.",
#     "Atualiza√ß√£o do software dispon√≠vel. Clique para baixar a vers√£o mais recente.",
#     "Aten√ß√£o! Sua conta ser√° desativada em 24 horas se n√£o confirmar seus dados.",

#     "Titanfall¬Æ 2, da sua lista de desejos, est√° em oferta!",
# ]

# # Testar cada e-mail
# for email in test_emails:
#     inputs = tokenizer(email, return_tensors="pt", truncation=True, padding='max_length', max_length=512).to(device)
#     with torch.no_grad():
#         outputs = model(**inputs)
#         logits = outputs.logits

#     probs = torch.softmax(logits, dim=-1)
#     predicted_class = torch.argmax(probs, dim=-1).item()  # Usar torch.argmax no tensor PyTorch
#     confidence = probs[0][predicted_class].item() * 100  # Confian√ßa na previs√£o em porcentagem

#     color = GREEN if predicted_class == 0 else RED  # Verde para leg√≠timo, Vermelho para SPAM

#     print(f"Email: \"{email}\"")
#     print(f"Predicted class: {color + 'SPAM' if predicted_class == 1 else color + 'Leg√≠timo'}")
#     print(f"{RESET}Confidence: {confidence:.2f}%")
#     print(f"Probabilities: {probs}\n{RESET}")


from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch

# C√≥digos ANSI para cores
RED = '\033[91m'
GREEN = '\033[92m'
RESET = '\033[0m'

# Carregar o modelo e o tokenizer salvos
tokenizer = AutoTokenizer.from_pretrained("./tokenizer")
model = AutoModelForSequenceClassification.from_pretrained("./models")

# Mover o modelo para a GPU (se dispon√≠vel)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)
model.eval()  # Colocar o modelo em modo de avalia√ß√£o

# E-mails de teste com assunto
test_emails = [
    {"subject": "Reuni√£o agendada", "content": "Reuni√£o de equipe agendada para amanh√£ √†s 10h. Favor confirmar presen√ßa."},
    {"subject": "Pr√™mio ganhado", "content": "Parab√©ns! Voc√™ ganhou um pr√™mio de R$ 1.000,00. Clique aqui para resgatar."},
    {"subject": "Fatura dispon√≠vel", "content": "Fatura de cart√£o de cr√©dito dispon√≠vel para visualiza√ß√£o. Acesse sua conta para mais detalhes."},
    {"subject": "Conta bloqueada", "content": "Sua conta foi bloqueada. Para reativar, clique no link e atualize suas informa√ß√µes."},
    {"subject": "Convite para semin√°rio", "content": "Convite para o semin√°rio sobre seguran√ßa cibern√©tica na pr√≥xima semana."},
    {"subject": "Oferta exclusiva", "content": "Voc√™ foi selecionado para uma oferta exclusiva! Responda agora para garantir."},
    {"subject": "Atualiza√ß√£o de software", "content": "Atualiza√ß√£o do software dispon√≠vel. Clique para baixar a vers√£o mais recente."},
    {"subject": "Aten√ß√£o com a conta", "content": "Aten√ß√£o! Sua conta ser√° desativada em 24 horas se n√£o confirmar seus dados."},
    {"subject": "Titanfall¬Æ 2, da sua lista de desejos, est√° em oferta!", "content": "1 JOGO DA SUA LISTA DE DESEJOS EST√Å EM OFERTA! Pre√ßos e descontos espec√≠ficos podem estar sujeitos a altera√ß√µes. Verifique a p√°gina na Loja Steam para mais detalhes. Voc√™ est√° recebendo este e-mail por ter adicionado o item acima √† sua lista de desejos no Steam."},
    {"subject": "Voc√™ tem uma nova mensagem", "content": "InMail: voc√™ tem uma mensagem nova. Clique para ver."},
    {"subject": "Confirma√ß√£o de pagamento", "content": "Confirma√ß√£o de pagamento recebida. Obrigado por sua compra."},
    {"subject": "Pix recebido", "content": "Voc√™ recebeu um Pix de R$ 50,00 de Jo√£o Silva. Clique aqui para ver os detalhes."},
    {"subject": "Tigrinho vai te pagar", "content": "Tigrinho vai te pagar R$ 100,00. Clique aqui para ver os detalhes."},
    {"subject": "Bem vindo a nossa plataforma", "content": "Parab√©ns, voc√™ acaba de liberar seu pr√≥prio pombo-correio digital! üê¶‚úâÔ∏è Ele est√° pronto para voar alto e entregar seus e-mails com a efici√™ncia de um... pombo ninja! (Sim, eles existem... pelo menos por aqui üòâ) Fique tranquilo, aqui seus e-mails chegam rapidinho (e sem sujeira de pombo nas janelas, prometemos). Agora √© s√≥ relaxar e deixar que a gente cuide do resto. Se precisar de algo, √© s√≥ dar um pitiu que o pombo responde! Abra√ßos (e umas asinhas), Equipe do Pombas"}

]

# Testar cada e-mail
for email in test_emails:
    subject = email["subject"]
    content = email["content"]

    # Combinar o assunto e o conte√∫do do e-mail
    combined_text = f"Subject: {subject}\n\nContent: {content}"

    inputs = tokenizer(combined_text, return_tensors="pt", truncation=True, padding='max_length', max_length=512).to(device)
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits

    probs = torch.softmax(logits, dim=-1)
    predicted_class = torch.argmax(probs, dim=-1).item()  # Usar torch.argmax no tensor PyTorch
    confidence = probs[0][predicted_class].item() * 100  # Confian√ßa na previs√£o em porcentagem

    # Definir cores baseadas na previs√£o
    color = GREEN if predicted_class == 0 else RED  # Verde para leg√≠timo, Vermelho para SPAM

    # Exibir resultado
    print(f"Subject: \"{subject}\"")
    print(f"Content: \"{content}\"")
    print(f"Predicted class: {color + ('Leg√≠timo' if predicted_class == 0 else 'SPAM') + RESET}")
    print(f"Confidence: {confidence:.2f}%")

    # Exibir probabilidades com formata√ß√£o
    for i, prob in enumerate(probs[0]):
        label = "Leg√≠timo" if i == 0 else "SPAM"
        print(f"{label} Probability: {prob.item() * 100:.2f}%")

    print(f"{RESET}")

